/*
 * This file is generated by jOOQ.
 */
package com.crud.v2.jooq.tables.daos;


import com.crud.v2.jooq.tables.Employee;
import com.crud.v2.jooq.tables.records.EmployeeRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeDao extends DAOImpl<EmployeeRecord, com.crud.v2.jooq.tables.pojos.Employee, Long> {

    /**
     * Create a new EmployeeDao without any configuration
     */
    public EmployeeDao() {
        super(Employee.EMPLOYEE, com.crud.v2.jooq.tables.pojos.Employee.class);
    }

    /**
     * Create a new EmployeeDao with an attached configuration
     */
    public EmployeeDao(Configuration configuration) {
        super(Employee.EMPLOYEE, com.crud.v2.jooq.tables.pojos.Employee.class, configuration);
    }

    @Override
    public Long getId(com.crud.v2.jooq.tables.pojos.Employee object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchById(Long... values) {
        return fetch(Employee.EMPLOYEE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public com.crud.v2.jooq.tables.pojos.Employee fetchOneById(Long value) {
        return fetchOne(Employee.EMPLOYEE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<com.crud.v2.jooq.tables.pojos.Employee> fetchOptionalById(Long value) {
        return fetchOptional(Employee.EMPLOYEE.ID, value);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchByName(String... values) {
        return fetch(Employee.EMPLOYEE.NAME, values);
    }

    /**
     * Fetch records that have <code>EMAIL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>EMAIL IN (values)</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchByEmail(String... values) {
        return fetch(Employee.EMPLOYEE.EMAIL, values);
    }

    /**
     * Fetch records that have <code>SALARY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchRangeOfSalary(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.SALARY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>SALARY IN (values)</code>
     */
    public List<com.crud.v2.jooq.tables.pojos.Employee> fetchBySalary(Double... values) {
        return fetch(Employee.EMPLOYEE.SALARY, values);
    }
}
